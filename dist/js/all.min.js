"use strict";

(function (angular) {
    angular.module("app", []);
})(angular);
"use strict";
'use strict';

(function (angular) {
    'use strict';

    angular.module('app').constant('STEP', {
        identify: 1,
        play: 2,
        finished: 3
    }).constant('GAME', {
        timeToSeeCards: 1250,
        timeToClearCards: 250
    }).constant('STORAGE', {
        players: 'jc.app.storage.players',
        lastPlayer: 'jc.app.storage.last_player'
    }).constant('CARDS_IMAGES', ['images/cards/darth-vader.jpg', 'images/cards/luke.jpg', 'images/cards/jabba.jpg', 'images/cards/han-solo.jpg', 'images/cards/yoda.jpg', 'images/cards/darth-sidious.jpg', 'images/cards/rd2d.jpg', 'images/cards/c3po.jpg', 'images/cards/chewbaca.jpg', 'images/cards/boba-fett.jpg', 'images/cards/leia.jpg', 'images/cards/ewok.jpg', 'images/cards/darth-vader.jpg', 'images/cards/luke.jpg', 'images/cards/jabba.jpg', 'images/cards/han-solo.jpg', 'images/cards/yoda.jpg', 'images/cards/darth-sidious.jpg', 'images/cards/rd2d.jpg', 'images/cards/c3po.jpg', 'images/cards/chewbaca.jpg', 'images/cards/boba-fett.jpg', 'images/cards/leia.jpg', 'images/cards/ewok.jpg'])
    /* .constant('CARDS_IMAGES', [
        'images/cards/darth-vader.jpg',
        'images/cards/luke.jpg',
        'images/cards/jabba.jpg',
        'images/cards/darth-vader.jpg',
        'images/cards/luke.jpg',
        'images/cards/jabba.jpg'
    ]) */
    .constant('_', _);
})(angular);
'use strict';

;(function (angular) {
    'use strict';

    angular.module('app').controller('GameController', GameController);

    GameController.$inject = ['$log', '$timeout', 'STEP', 'GAME', 'PlayerModel', 'GameModel', 'PlayerService'];
    function GameController($log, $timeout, STEP, GAME, PlayerModel, GameModel, PlayerService) {
        var vm = this;
        vm.STEP = STEP;
        vm.activeStep = undefined;
        vm.player = undefined;
        vm.game = undefined;
        vm.ranking = undefined;
        vm.loginError = undefined;

        activate();

        function activate() {
            PlayerService.getPlayers().then(function (res) {
                vm.ranking = res.data;

                vm.activeStep = vm.STEP.identify;
                vm.player = new PlayerModel();
                vm.game = new GameModel();
                vm.loginError = undefined;
            }).catch(function (err) {
                return $log.error(err);
            }).finally();
        }

        vm.isStep = function (step) {
            return vm.activeStep === step;
        };

        vm.nextStep = function () {
            switch (vm.activeStep) {
                case vm.STEP.identify:
                    vm._playExec();
                    break;
                case vm.STEP.play:
                    vm._finishedExec();
                    break;
            }
        };

        vm.selectCard = function (card) {
            if (!!vm.game.blocked || card.isFound()) {
                return;
            }

            if (!!vm.game.cardOne) {
                if (vm.game.cardOne.id === card.id) {
                    return;
                }

                vm.game.cardTwo = card;
                vm.game.cardTwo.setVisible(true);

                vm._checkPlay();
            } else {
                vm.game.cardOne = card;
                vm.game.cardOne.setVisible(true);
            }
        };

        vm.restart = function () {
            return activate();
        };

        vm.playAgain = function () {
            vm.activeStep = vm.STEP.play;
            vm.game = new GameModel();

            vm.game.init();
        };

        vm._checkPlay = function () {
            vm.game.blocked = true;

            vm.game.increaseRound();
            if (vm.game.playCheck()) {
                vm.game.cardOne.setFound(true);
                vm.game.cardTwo.setFound(true);

                if (vm._allCardsAreFound()) {
                    vm.nextStep();
                }

                $timeout(function () {
                    vm._clearCards();
                }, GAME.timeToClearCards);
            } else {
                $timeout(function () {
                    if (!!vm.game.cardOne) {
                        vm.game.cardOne.setVisible(false);
                    }

                    if (!!vm.game.cardTwo) {
                        vm.game.cardTwo.setVisible(false);
                    }

                    vm._clearCards();
                }, GAME.timeToSeeCards);
            }
        };

        vm._playExec = function () {
            if (!!vm.player.isValid()) {
                vm.activeStep = vm.STEP.play;
                vm.loginError = undefined;
                vm.game.init();
            } else {
                vm.loginError = "Digite seu nome para começar";
            }
        };

        vm._finishedExec = function () {
            vm.player.setRounds(vm.game.rounds);

            PlayerService.addPlayer(vm.player).then(function () {
                vm.activeStep = vm.STEP.finished;
            }).catch(function (err) {
                return $log.error(err);
            }).finally();
        };

        vm._allCardsAreFound = function () {
            var _index = vm.game.cards.findIndex(function (card) {
                return !card.isFound();
            });

            return _index === -1 ? true : false;
        };

        vm._clearCards = function () {
            vm.game.cardOne = undefined;
            vm.game.cardTwo = undefined;

            vm.game.blocked = false;
        };
    }
})(angular);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function (angular) {
    'use strict';

    angular.module('app').factory('CardModel', CardModel);

    function CardModel() {
        var Card = function () {
            function Card(card) {
                _classCallCheck(this, Card);

                /**
                * @description Construtor do modelo Card
                * @memberof app
                * @constructs CardModel
                * @param {object} Card
                * @param {string} card.id identificador do card
                * @param {string} card.guid identificador único do card
                * @param {string} card.image imagem do card
                * @param {boolean} card.visible define a visibilidade do card
                * @param {boolean} card.found define se o card já foi encontrado
                */
                this.id = 0;
                this.image = undefined;
                this.visible = false;
                this.found = false;

                angular.extend(this, card);
            }

            /**
             * @memberof app.CardModel
             * @function setVisible
             * @description Atribui valor a visible
             * @returns {void}
             * @inner
             */


            _createClass(Card, [{
                key: 'setVisible',
                value: function setVisible(value) {
                    this.visible = value;
                }

                /**
                 * @memberof app.CardModel
                 * @function setFound
                 * @description Atribui valor a found
                 * @returns {void}
                 * @inner
                 */

            }, {
                key: 'setFound',
                value: function setFound(value) {
                    this.found = value;
                }

                /**
                 * @memberof app.CardModel
                 * @function isVisible
                 * @description retorna se visible é true
                 * @returns {void}
                 * @inner
                 */

            }, {
                key: 'isVisible',
                value: function isVisible() {
                    return !!this.visible;
                }

                /**
                 * @memberof app.CardModel
                 * @function isFound
                 * @description retorna se found é true
                 * @returns {void}
                 * @inner
                 */

            }, {
                key: 'isFound',
                value: function isFound() {
                    return !!this.found;
                }
            }]);

            return Card;
        }();

        return Card;
    }
})(angular);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function (angular) {
    'use strict';

    angular.module('app').factory('GameModel', GameModel);

    GameModel.$inject = ['CardModel', 'CARDS_IMAGES', '_'];
    function GameModel(CardModel, CARDS_IMAGES, _) {
        var Game = function () {
            function Game(game) {
                _classCallCheck(this, Game);

                /**
                * @description Construtor do modelo Game
                * @memberof app
                * @constructs GameModel
                * @param {object} Game
                * @param {string} game.cards lista de cards do game
                * @param {string} game.rounds Quantidade de rounds ocorridos no game
                * @param {string} game.cardOne Primeiro card selecionado no game
                * @param {string} game.cardTwo Segundo card selecionado no game
                */
                this.cards = [];
                this.rounds = 0;
                this.cardOne = undefined;
                this.cardTwo = undefined;
                this.blocked = false;

                angular.extend(this, game);
            }

            /**
             * @memberof app.GameModel
             * @function init
             * @description Inicializa o game
             * @returns {void}
             * @inner
             */


            _createClass(Game, [{
                key: 'init',
                value: function init() {
                    this.cards = [];

                    for (var index = 0; index < CARDS_IMAGES.length; index++) {
                        this.cards.push(new CardModel({
                            id: index + 1,
                            image: CARDS_IMAGES[index]
                        }));
                    }

                    this.cards = _.shuffle(this.cards);
                }

                /**
                 * @memberof app.GameModel
                 * @function increaseRound
                 * @description Verifica se instância está válida ou não
                 * @returns {boolean}
                 * @inner
                 */

            }, {
                key: 'increaseRound',
                value: function increaseRound() {
                    this.rounds++;
                }

                /**
                 * @memberof app.GameModel
                 * @function isFinished
                 * @description Verifica se instância está válida ou não
                 * @returns {boolean}
                 * @inner
                 */

            }, {
                key: 'isFinished',
                value: function isFinished() {
                    var _pendind = this.cards.filter(function (item) {
                        return !item.isFound();
                    });

                    return _pendind.length === 0;
                }

                /**
                 * @memberof app.GameModel
                 * @function playCheck
                 * @description Verifica se instância está válida ou não
                 * @returns {boolean}
                 * @inner
                 */

            }, {
                key: 'playCheck',
                value: function playCheck() {
                    return !!this.cardOne && !!this.cardTwo && this.cardOne.image === this.cardTwo.image;
                }
            }]);

            return Game;
        }();

        return Game;
    }
})(angular);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function (angular) {
    'use strict';

    angular.module('app').factory('PlayerModel', PlayerModel);

    function PlayerModel() {
        var Player = function () {
            function Player(player) {
                _classCallCheck(this, Player);

                /**
                * @description Construtor do modelo Player
                * @memberof app
                * @constructs PlayerModel
                * @param {object} Player
                * @param {string} player.name name do player
                * @param {string} player.rounds melhor classificação para o ranking
                */
                this.name = undefined;
                this.rounds = 999;

                angular.extend(this, player);
            }

            /**
             * @memberof app.PlayerModel
             * @function isValid
             * @description Verifica se instância está válida ou não
             * @returns {boolean}
             * @inner
             */


            _createClass(Player, [{
                key: 'isValid',
                value: function isValid() {
                    return !!this.name;
                }

                /**
                 * @memberof app.PlayerModel
                 * @function setRounds
                 * @description Atualiza a melhor classificação
                 * @returns {void}
                 * @inner
                 */

            }, {
                key: 'setRounds',
                value: function setRounds(value) {
                    if (this.rounds > value) {
                        this.rounds = value;
                    }
                }
            }]);

            return Player;
        }();

        return Player;
    }
})(angular);
'use strict';

(function (angular) {
    'use strict';

    angular.module('app').service('GuidService', GuidService);

    function GuidService() {
        this.getNewGuid = getNewGuid;

        function getNewGuid() {
            // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript

            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0,
                    v = c === 'x' ? r : r & 0x3 | 0x8;
                return v.toString(16);
            });
        }
    }
})(angular);
'use strict';

(function () {
    'use strict';

    angular.module('app').service('PlayerService', PlayerService);

    PlayerService.$inject = ['$q', 'PlayerModel', 'STORAGE', 'StorageService'];

    function PlayerService($q, PlayerModel, STORAGE, StorageService) {
        this.getPlayers = getPlayers;
        this.addPlayer = addPlayer;

        /**
         * @memberof app.PlayerService
         * @function getPlayers
         * @description Busca lista de objetos retorna promessa
         * @returns {promise}
         * @inner
         */
        function getPlayers() {
            var _players = StorageService.get(STORAGE.players) || []; // [{name: 'Vader', rounds: 12}, {name: 'Luke'}, {name: 'Leia', rounds: 8}];

            _players = _players.map(function (item) {
                return item = new PlayerModel(item);
            }).sort(function (a, b) {
                return a.rounds - b.rounds;
            });

            return $q.resolve({
                data: _players
            });
        };

        /**
         * @memberof app.PlayerService
         * @function addPlayer
         * @description Grava objeto específico
         * @param {PlayerModel} player
         * @returns {promise}
         * @inner
         */
        function addPlayer(player) {
            var _players = undefined;

            return this.getPlayers().then(function (res) {
                _players = res.data || [];

                var _index = _players.findIndex(function (item) {
                    return item.name === player.name;
                });

                if (_index === -1) {
                    _players.push(player);
                } else {
                    player.setRounds(_players[_index].rounds);
                    _players.splice(_index, 1, player);
                }

                StorageService.set(STORAGE.players, _players);

                return $q.resolve();
            }).catch(function (err) {
                return err;
            }).finally();
        };
    }
})();
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (angular) {
    'use strict';

    angular.module('app').service('StorageService', StorageService);

    StorageService.$inject = ['$window'];

    function StorageService($window) {

        var storage = $window.localStorage;
        this.exists = exists;
        this.get = get;
        this.set = set;
        this.remove = remove;
        this.getLength = getLength;
        this.clear = clear;
        this._isJson = _isJson;

        function exists(key) {
            return this.getLength() > 0 && storage.getItem(key);
        }

        function get(key) {
            if (!key) {
                return storage;
            }

            if (this.exists(key)) {
                var item = storage.getItem(key);
                return this._isJson(item) ? angular.fromJson(item) : item;
            }

            return null;
        }

        function set(key, value) {
            if (this.exists(key)) {
                this.remove(key);
            }

            var item = (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? angular.toJson(value) : value;
            storage.setItem(key, item);
        }

        function remove(key) {
            if (this.exists(key)) {
                storage.removeItem(key);
                return true;
            }

            return false;
        }

        function getLength() {
            return storage.length;
        }

        function clear() {
            storage.clear();
        }

        function _isJson(str) {
            try {
                JSON.parse(str);
            } catch (e) {
                return false;
            }

            return true;
        }
    };
})(angular);